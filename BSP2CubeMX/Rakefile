#
#
require 'fileutils'

board_files_dir = '/Users/l0cky/STM32Cube/Repository/STM32Cube_FW_F7_V1.15.0'
cmakeLists_file = 'CMakeLists.txt'

bsp_discovery_dir = 'Drivers/BSP/STM32746G-Discovery'
bsp_component_dir = 'Drivers/BSP/Components'
hal_driver_inc = 'Drivers/STM32F7xx_HAL_Driver/Inc'
hal_driver_src = 'Drivers/STM32F7xx_HAL_Driver/Src'

desc 'Init project to add BSP libraries'
task init: ['copy_bsp_files', 'add_BSP_cmake', 'add_include', 'copy_hal', 'enable_hal_modules', 'copy_utilities'] do
  puts 'Init project to add BSP libraries'
end

desc 'Add BSP folder to CMakeLists.txt include section'
task :add_BSP_cmake do
  if File.readlines(cmakeLists_file).grep(/Drivers\/BSP\/STM32746G-Discovery/).empty?
    #puts 'dont find'
    file_contents = File.read(cmakeLists_file)
    file_contents.gsub!(/Drivers\/CMSIS\/Include/, "Drivers/CMSIS/Include #{bsp_discovery_dir}")
    File.write(cmakeLists_file, file_contents)
    #else
    #  puts 'find'
  end

  if File.readlines(cmakeLists_file).grep(/Drivers\/BSP\/Components/).empty?
    #puts 'dont find'
    file_contents = File.read(cmakeLists_file)
    file_contents.gsub!(/Drivers\/CMSIS\/Include/, "Drivers/CMSIS/Include #{bsp_component_dir}")
    File.write(cmakeLists_file, file_contents)
    #else
    #puts 'find'
  end
end

desc 'Copy BSP files'
task :copy_bsp_files do
  mkdir_p("#{bsp_discovery_dir}")
  copy_entry("#{board_files_dir}/#{bsp_discovery_dir}", "#{bsp_discovery_dir}")
  copy_entry("#{board_files_dir}/#{bsp_component_dir}", "#{bsp_component_dir}")
end

desc 'Copy HAL header/source files'
task :copy_hal do
  copy_entry("#{board_files_dir}/#{hal_driver_inc}", "#{hal_driver_inc}")
  copy_entry("#{board_files_dir}/#{hal_driver_src}", "#{hal_driver_src}")

  del_inc_files = ['stm32_assert_template.h', 'stm32f7xx_hal_conf_template.h']
  del_src_files = ['stm32f7xx_hal_msp_template.c', 'stm32f7xx_hal_timebase_rtc_alarm_template.c', 'stm32f7xx_hal_timebase_rtc_wakeup_template.c', 'stm32f7xx_hal_timebase_tim_template.c']

  del_inc_files.each {|file| remove_file("#{hal_driver_inc}/#{file}")}
  del_src_files.each {|file| remove_file("#{hal_driver_src}/#{file}")}
end

desc 'Add discovery to main.h'
task :add_include do
  file = 'Inc/main.h'
  if File.readlines(file).grep(/stm32746g_discovery.h/).empty?
    file_contents = File.read(file)
    file_contents.gsub!(/\/\* USER CODE BEGIN Includes \*\//, "/* USER CODE BEGIN Includes */\n #include \"stm32746g_discovery.h\"")
    File.write(file, file_contents)
  end
end

desc 'Enable modules'
task :enable_hal_modules do
  modules = [
      'HAL_ADC_MODULE_ENABLED',
      'HAL_CRYP_MODULE_ENABLED',
      'HAL_CAN_MODULE_ENABLED',
      'HAL_CEC_MODULE_ENABLED',
      'HAL_CRC_MODULE_ENABLED',
      'HAL_DAC_MODULE_ENABLED',
      'HAL_DCMI_MODULE_ENABLED',
      'HAL_DMA2D_MODULE_ENABLED',
      'HAL_ETH_MODULE_ENABLED',
      'HAL_NAND_MODULE_ENABLED',
      'HAL_NOR_MODULE_ENABLED',
      'HAL_SRAM_MODULE_ENABLED',
      'HAL_SDRAM_MODULE_ENABLED',
      'HAL_HASH_MODULE_ENABLED',
      'HAL_I2S_MODULE_ENABLED',
      'HAL_IWDG_MODULE_ENABLED',
      'HAL_LPTIM_MODULE_ENABLED',
      'HAL_LTDC_MODULE_ENABLED',
      'HAL_QSPI_MODULE_ENABLED',
      'HAL_RNG_MODULE_ENABLED',
      'HAL_RTC_MODULE_ENABLED',
      'HAL_SAI_MODULE_ENABLED',
      'HAL_SD_MODULE_ENABLED',
      'HAL_MMC_MODULE_ENABLED',
      'HAL_SPDIFRX_MODULE_ENABLED',
      'HAL_SPI_MODULE_ENABLED',
      'HAL_TIM_MODULE_ENABLED',
      'HAL_UART_MODULE_ENABLED',
      'HAL_USART_MODULE_ENABLED',
      'HAL_IRDA_MODULE_ENABLED',
      'HAL_SMARTCARD_MODULE_ENABLED',
      'HAL_WWDG_MODULE_ENABLED',
      'HAL_PCD_MODULE_ENABLED',
      'HAL_HCD_MODULE_ENABLED',
      'HAL_DFSDM_MODULE_ENABLED',
      'HAL_DSI_MODULE_ENABLED',
      'HAL_JPEG_MODULE_ENABLED',
      'HAL_MDIOS_MODULE_ENABLED',
      'HAL_SMBUS_MODULE_ENABLED',
      'HAL_EXTI_MODULE_ENABLED'
  ]

  file = 'Inc/stm32f7xx_hal_conf.h'
  modules.each do |item|
    File.readlines(file)
    file_contents = File.read(file)
    file_contents.sub!(/\/\* #define #{item}   \*\//, "#define #{item}")
    File.write(file, file_contents)
  end
end

desc 'Copy utilities'
task :copy_utilities do
  utilities = 'Utilities'
  copy_entry("#{board_files_dir}/#{utilities}", "#{utilities}")
end